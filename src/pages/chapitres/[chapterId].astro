---
import MainLayout from "../../layouts/MainLayout.astro";
import ChapterContent from "../../components/ChapterContent.astro";
import {hasExam} from "../../utils/markdown";

export function getStaticPaths() {
	return [{params: {chapterId: "08"}}, {params: {chapterId: "09"}}, {params: {chapterId: "10"}}, {params: {chapterId: "11"}}, {params: {chapterId: "12"}}, {params: {chapterId: "13"}}];
}

const CHAPTER_TITLES: Record<string, string> = {
	"08": "Politiques sociales et travail social",
	"09": "L'intervention personnelle en travail social",
	"10": "L'intervention de groupe",
	"11": "Chapitre 11",
	"12": "Chapitre 12",
	"13": "Chapitre 13",
};

const {chapterId} = Astro.params;
const title = CHAPTER_TITLES[chapterId] || `Chapitre ${chapterId}`;
const chapterTitle = `Chapitre ${chapterId} - ${title}`;

// Vérifier si ce chapitre a un questionnaire disponible
const examAvailable = hasExam(chapterId);

// Vérifier si c'est un chapitre qui doit afficher l'examen au lieu des notes
const isExamChapter = ["08", "09", "10"].includes(chapterId);

// Dynamically import the exam component if available
let ExamComponent;
try {
	if (isExamChapter) {
		// Import the relevant exam component based on chapterId
		const module = await import(`../../components/exams/Exam${chapterId}.astro`);
		ExamComponent = module.default;
	}
} catch (error) {
	console.error(`Failed to load exam component for chapter ${chapterId}:`, error);
}

// Pour les autres chapitres, on charge le contenu markdown
let contentHtml = "";

if (!isExamChapter) {
	try {
		const response = await fetch(`${Astro.url.origin}/markdown/${chapterId}.md`);
		if (response.ok) {
			const markdown = await response.text();
			// Use simple HTML conversion
			contentHtml = markdown
				.replace(/^# (.*)/gm, "<h1>$1</h1>")
				.replace(/^## (.*)/gm, "<h2>$1</h2>")
				.replace(/^### (.*)/gm, "<h3>$1</h3>")
				.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
				.replace(/\*(.*?)\*/g, "<em>$1</em>")
				.replace(/\n\n/g, "</p><p>")
				.replace(/^(.+)$/gm, "$1<br>")
				.trim();
			contentHtml = `<p>${contentHtml}</p>`;
		} else {
			contentHtml = `<h1>${chapterTitle}</h1><p>Le contenu n'est pas disponible.</p>`;
		}
	} catch (error) {
		console.error(`Erreur lors du chargement du markdown: ${error}`);
		contentHtml = `<h1>${chapterTitle}</h1><p>Erreur: ${error}</p>`;
	}
}
---

<MainLayout>
	<div class='chapter-container'>
		<div class='navigation-buttons'>
			{
				parseInt(chapterId) > 8 && (
					<a href={`/chapitres/${(parseInt(chapterId) - 1).toString().padStart(2, "0")}`} class='nav-button prev'>
						&larr; Chapitre précédent
					</a>
				)
			}

			{
				parseInt(chapterId) < 13 && (
					<a href={`/chapitres/${(parseInt(chapterId) + 1).toString().padStart(2, "0")}`} class='nav-button next'>
						Chapitre suivant &rarr;
					</a>
				)
			}
		</div>

		{
			isExamChapter && ExamComponent ? (
				<ExamComponent title={`Chapitre ${chapterId} - Examen`} />
			) : examAvailable ? (
				<div class='exam-not-available'>
					<h2>Le questionnaire pour ce chapitre est en cours de développement</h2>
					<p>Nous travaillons actuellement sur le questionnaire pour le Chapitre {chapterId}. Revenez bientôt!</p>
					<a href='/' class='back-button'>
						Retour à l'accueil
					</a>
				</div>
			) : (
				<ChapterContent title={chapterTitle} content={contentHtml} />
			)
		}

		<div class='navigation-buttons'>
			{
				parseInt(chapterId) > 8 && (
					<a href={`/chapitres/${(parseInt(chapterId) - 1).toString().padStart(2, "0")}`} class='nav-button prev'>
						&larr; Chapitre précédent
					</a>
				)
			}

			{
				parseInt(chapterId) < 13 && (
					<a href={`/chapitres/${(parseInt(chapterId) + 1).toString().padStart(2, "0")}`} class='nav-button next'>
						Chapitre suivant &rarr;
					</a>
				)
			}
		</div>
	</div>
</MainLayout>

<style>
	.chapter-container {
		max-width: 800px;
		margin: 0 auto;
	}

	.navigation-buttons {
		display: flex;
		justify-content: space-between;
		margin: 2rem 0;
	}

	.nav-button {
		display: inline-block;
		padding: 0.75rem 1.5rem;
		background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
		color: white;
		text-decoration: none;
		border-radius: 8px;
		font-weight: 500;
		transition: opacity 0.2s;
	}

	.nav-button:hover {
		opacity: 0.85;
	}

	.nav-button.prev {
		margin-right: auto;
	}

	.nav-button.next {
		margin-left: auto;
	}

	.exam-not-available {
		background: white;
		border-radius: 8px;
		box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
		padding: 2rem;
		text-align: center;
		margin: 2rem 0;
	}

	.exam-not-available h2 {
		color: var(--primary-color);
		margin-bottom: 1rem;
	}

	.exam-not-available p {
		margin-bottom: 2rem;
		color: #666;
	}

	.back-button {
		display: inline-block;
		padding: 0.75rem 1.5rem;
		background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
		color: white;
		text-decoration: none;
		border-radius: 8px;
		font-weight: 500;
		transition: opacity 0.2s;
	}

	.back-button:hover {
		opacity: 0.85;
	}

	@media (max-width: 768px) {
		.navigation-buttons {
			flex-direction: column;
			gap: 1rem;
		}

		.nav-button {
			text-align: center;
		}
	}
</style>
