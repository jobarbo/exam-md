---
/**
 * Dynamic Chapter Page
 * Displays exam or content for a specific chapter
 */

import MainLayout from "../../layouts/MainLayout.astro";
import ChapterContent from "../../components/ChapterContent.astro";
import DynamicExam from "../../components/exams/DynamicExam.astro";
import {hasExam} from "../../utils/markdown";

export function getStaticPaths() {
	return [{params: {chapterId: "01"}}, {params: {chapterId: "02"}}, {params: {chapterId: "03"}}, {params: {chapterId: "04"}}, {params: {chapterId: "05"}}, {params: {chapterId: "06"}}];
}

const CHAPTER_TITLES: Record<string, string> = {
	"01": "Fondement 1 - Problèmes sociaux et théories du travail social",
	"02": "Fondement 2 - Pensée critique, épistémologie et paradigme",
	"03": "Fondement 3 - Fonctionnalisme et Durkheim",
	"04": "Fondement 4 - Marxisme et approche conflictuelle",
	"05": "Fondement 5 - Constructivisme social",
	"06": "Fondement 6 - Interactionnisme symbolique et théorie de l'étiquetage",
};

const {chapterId} = Astro.params;

if (!chapterId) {
	return Astro.redirect("/404");
}

const title = CHAPTER_TITLES[chapterId] || `Chapitre ${chapterId}`;
const chapterTitle = `Chapitre ${chapterId} - ${title}`;
const examAvailable = hasExam(chapterId);

// Chapters that should display exam instead of notes
const isExamChapter = ["01", "02", "03", "04", "05", "06"].includes(chapterId);

// Check if exam data exists for this chapter
let examDataExists = false;
if (isExamChapter) {
	try {
		await import(`../../data/exams/exam${chapterId}.ts`);
		examDataExists = true;
	} catch (error) {
		console.error(`Exam data not available for chapter ${chapterId}:`, error);
	}
}

// Load markdown content for non-exam chapters
let contentHtml = "";
if (!isExamChapter) {
	try {
		const response = await fetch(`${Astro.url.origin}/markdown/${chapterId}.md`);
		if (response.ok) {
			const markdown = await response.text();
			// Simple HTML conversion
			contentHtml = markdown
				.replace(/^# (.*)/gm, "<h1>$1</h1>")
				.replace(/^## (.*)/gm, "<h2>$1</h2>")
				.replace(/^### (.*)/gm, "<h3>$1</h3>")
				.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
				.replace(/\*(.*?)\*/g, "<em>$1</em>")
				.replace(/\n\n/g, "</p><p>")
				.replace(/^(.+)$/gm, "$1<br>")
				.trim();
			contentHtml = `<p>${contentHtml}</p>`;
		} else {
			contentHtml = `<h1>${chapterTitle}</h1><p>Le contenu n'est pas disponible.</p>`;
		}
	} catch (error) {
		console.error(`Error loading markdown:`, error);
		contentHtml = `<h1>${chapterTitle}</h1><p>Erreur: ${error}</p>`;
	}
}

const prevChapterId = parseInt(chapterId) > 1 ? (parseInt(chapterId) - 1).toString().padStart(2, "0") : null;
const nextChapterId = parseInt(chapterId) < 6 ? (parseInt(chapterId) + 1).toString().padStart(2, "0") : null;
---

<MainLayout title={chapterTitle}>
	<div class='chapter-container'>
		<div class='chapter-header'>
			<nav class='breadcrumbs' aria-label='Breadcrumb'>
				<a href='/'>
					<svg
						xmlns='http://www.w3.org/2000/svg'
						width='20'
						height='20'
						viewBox='0 0 24 24'
						fill='none'
						stroke='currentColor'
						stroke-width='2'
						stroke-linecap='round'
						stroke-linejoin='round'
						aria-hidden='true'>
						<path d='m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z'></path>
						<polyline points='9 22 9 12 15 12 15 22'></polyline>
					</svg>
					<span class='sr-only'>Accueil</span>
				</a>
				<span>/</span>
				<span>Chapitre {chapterId}</span>
			</nav>

			<div class='navigation-buttons'>
				{
					prevChapterId && (
						<a href={`/chapitres/${prevChapterId}`} class='nav-button prev'>
							<svg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'>
								<path d='m12 19-7-7 7-7' />
								<path d='M19 12H5' />
							</svg>
							<span>Chapitre précédent</span>
						</a>
					)
				}

				{
					nextChapterId && (
						<a href={`/chapitres/${nextChapterId}`} class='nav-button next'>
							<span>Chapitre suivant</span>
							<svg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'>
								<path d='M5 12h14' />
								<path d='m12 5 7 7-7 7' />
							</svg>
						</a>
					)
				}
			</div>
		</div>

		{
			isExamChapter && examDataExists ? (
				<DynamicExam examId={chapterId} title={`Chapitre ${chapterId} - Examen`} />
			) : examAvailable ? (
				<div class='exam-not-available'>
					<div class='icon-container'>
						<svg xmlns='http://www.w3.org/2000/svg' width='48' height='48' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'>
							<path d='M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2' />
							<rect width='8' height='4' x='8' y='2' rx='1' ry='1' />
							<path d='M12 11h4' />
							<path d='M12 16h4' />
							<path d='M8 11h.01' />
							<path d='M8 16h.01' />
						</svg>
					</div>
					<h2>Le questionnaire pour ce chapitre est en cours de développement</h2>
					<p>Nous travaillons actuellement sur le questionnaire pour le Chapitre {chapterId}. Revenez bientôt!</p>
					<a href='/' class='btn back-button'>
						Retour à l'accueil
					</a>
				</div>
			) : (
				<ChapterContent title={chapterTitle} content={contentHtml} />
			)
		}

		<div class='navigation-buttons bottom-nav'>
			{
				prevChapterId && (
					<a href={`/chapitres/${prevChapterId}`} class='nav-button prev'>
						<svg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'>
							<path d='m12 19-7-7 7-7' />
							<path d='M19 12H5' />
						</svg>
						<span>Chapitre précédent</span>
					</a>
				)
			}

			{
				nextChapterId && (
					<a href={`/chapitres/${nextChapterId}`} class='nav-button next'>
						<span>Chapitre suivant</span>
						<svg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'>
							<path d='M5 12h14' />
							<path d='m12 5 7 7-7 7' />
						</svg>
					</a>
				)
			}
		</div>
	</div>
</MainLayout>

<style>
	.sr-only {
		position: absolute;
		width: 1px;
		height: 1px;
		padding: 0;
		margin: -1px;
		overflow: hidden;
		clip: rect(0, 0, 0, 0);
		white-space: nowrap;
		border-width: 0;
	}

	.chapter-container {
		max-width: 1200px;
		margin: 0 auto;
	}

	.chapter-header {
		margin-top: 2rem;
		margin-bottom: 2rem;
	}

	.breadcrumbs {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		margin-bottom: 1.5rem;
		color: var(--text-light);
		font-size: 0.9rem;
	}

	.breadcrumbs a {
		display: flex;
		align-items: center;
		color: var(--text-light);
		transition: color var(--transition-normal);
	}

	.breadcrumbs a:hover {
		color: var(--primary-color);
	}

	.breadcrumbs span:last-child {
		color: var(--text-color);
		font-weight: 500;
	}

	.navigation-buttons {
		display: flex;
		justify-content: space-between;
		gap: 1rem;
		margin-bottom: 1rem;
	}

	.bottom-nav {
		margin-top: 3rem;
		margin-bottom: 1rem;
	}

	.nav-button {
		display: inline-flex;
		align-items: center;
		gap: 0.5rem;
		padding: 0.75rem 1.25rem;
		background: white;
		color: var(--text-color);
		text-decoration: none;
		border-radius: var(--border-radius);
		font-weight: 500;
		transition: all var(--transition-normal);
		border: 1px solid rgba(0, 0, 0, 0.08);
		box-shadow: var(--shadow-sm);
	}

	.nav-button:hover {
		background-color: var(--bg-color);
		color: var(--primary-color);
		box-shadow: var(--shadow);
		transform: translateY(-2px);
	}

	.nav-button svg {
		transition: transform var(--transition-normal);
	}

	.nav-button.prev:hover svg {
		transform: translateX(-3px);
	}

	.nav-button.next:hover svg {
		transform: translateX(3px);
	}

	.nav-button.prev {
		margin-right: auto;
	}

	.nav-button.next {
		margin-left: auto;
	}

	.exam-not-available {
		background: white;
		border-radius: var(--border-radius);
		box-shadow: var(--shadow);
		padding: 3rem 2rem;
		text-align: center;
		margin: 2rem 0;
		animation: fadeIn 0.6s ease;
	}

	.icon-container {
		width: 90px;
		height: 90px;
		border-radius: 50%;
		background: rgba(59, 130, 246, 0.1);
		display: flex;
		align-items: center;
		justify-content: center;
		margin: 0 auto 1.5rem;
		color: var(--primary-color);
	}

	.exam-not-available h2 {
		color: var(--text-color);
		margin-bottom: 1rem;
		font-size: 1.5rem;
	}

	.exam-not-available p {
		margin-bottom: 2rem;
		color: var(--text-light);
		max-width: 500px;
		margin-left: auto;
		margin-right: auto;
	}

	.back-button {
		margin-top: 1rem;
	}

	@media (max-width: 768px) {
		.navigation-buttons {
			flex-direction: column;
			gap: 0.75rem;
		}

		.nav-button {
			width: 100%;
			justify-content: center;
		}

		.nav-button.prev,
		.nav-button.next {
			margin: 0;
		}

		.exam-not-available {
			padding: 2rem 1rem;
		}
	}
</style>
