---
import MainLayout from "../../layouts/MainLayout.astro";
import ChapterContent from "../../components/ChapterContent.astro";
import {hasExam} from "../../utils/markdown";

export function getStaticPaths() {
	return [
		{params: {chapterId: "08"}},
		{params: {chapterId: "09"}},
		{params: {chapterId: "10"}},
		{params: {chapterId: "11"}},
		{params: {chapterId: "12"}},
		{params: {chapterId: "13"}},
		{params: {chapterId: "14"}},
	];
}

const CHAPTER_TITLES: Record<string, string> = {
	"08": "Politiques sociales et travail social",
	"09": "L'intervention personnelle en travail social",
	"10": "L'intervention de groupe",
	"11": "Dynamique des groupes en travail social",
	"12": "La recherche en travail social",
	"13": "La pratique en travail social",
	"14": "Examen final",
};

const {chapterId} = Astro.params;
const title = CHAPTER_TITLES[chapterId] || `Chapitre ${chapterId}`;
const chapterTitle = `Chapitre ${chapterId} - ${title}`;

// Vérifier si ce chapitre a un questionnaire disponible
const examAvailable = hasExam(chapterId);

// Vérifier si c'est un chapitre qui doit afficher l'examen au lieu des notes
const isExamChapter = ["08", "09", "10", "11", "12", "13", "14"].includes(chapterId);

// Dynamically import the exam component if available
let ExamComponent;
try {
	if (isExamChapter) {
		// Import the relevant exam component based on chapterId
		const module = await import(`../../components/exams/Exam${chapterId}.astro`);
		ExamComponent = module.default;
	}
} catch (error) {
	console.error(`Failed to load exam component for chapter ${chapterId}:`, error);
}

// Pour les autres chapitres, on charge le contenu markdown
let contentHtml = "";

if (!isExamChapter) {
	try {
		const response = await fetch(`${Astro.url.origin}/markdown/${chapterId}.md`);
		if (response.ok) {
			const markdown = await response.text();
			// Use simple HTML conversion
			contentHtml = markdown
				.replace(/^# (.*)/gm, "<h1>$1</h1>")
				.replace(/^## (.*)/gm, "<h2>$1</h2>")
				.replace(/^### (.*)/gm, "<h3>$1</h3>")
				.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
				.replace(/\*(.*?)\*/g, "<em>$1</em>")
				.replace(/\n\n/g, "</p><p>")
				.replace(/^(.+)$/gm, "$1<br>")
				.trim();
			contentHtml = `<p>${contentHtml}</p>`;
		} else {
			contentHtml = `<h1>${chapterTitle}</h1><p>Le contenu n'est pas disponible.</p>`;
		}
	} catch (error) {
		console.error(`Erreur lors du chargement du markdown: ${error}`);
		contentHtml = `<h1>${chapterTitle}</h1><p>Erreur: ${error}</p>`;
	}
}
---

<MainLayout>
	<div class='chapter-container'>
		<div class='chapter-header'>
			<div class='breadcrumbs'>
				<a href='/'
					><svg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'
						><path d='m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z'></path><polyline points='9 22 9 12 15 12 15 22'></polyline></svg
					></a
				>
				<span>/</span>
				<span>Chapitre {chapterId}</span>
			</div>

			<div class='navigation-buttons'>
				{
					parseInt(chapterId) > 8 && (
						<a href={`/chapitres/${(parseInt(chapterId) - 1).toString().padStart(2, "0")}`} class='nav-button prev'>
							<svg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'>
								<path d='m12 19-7-7 7-7' />
								<path d='M19 12H5' />
							</svg>
							<span>Chapitre précédent</span>
						</a>
					)
				}

				{
					parseInt(chapterId) < 13 && (
						<a href={`/chapitres/${(parseInt(chapterId) + 1).toString().padStart(2, "0")}`} class='nav-button next'>
							<span>Chapitre suivant</span>
							<svg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'>
								<path d='M5 12h14' />
								<path d='m12 5 7 7-7 7' />
							</svg>
						</a>
					)
				}
			</div>
		</div>

		{
			isExamChapter && ExamComponent ? (
				<ExamComponent title={`Chapitre ${chapterId} - Examen`} />
			) : examAvailable ? (
				<div class='exam-not-available'>
					<div class='icon-container'>
						<svg xmlns='http://www.w3.org/2000/svg' width='48' height='48' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'>
							<path d='M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2' />
							<rect width='8' height='4' x='8' y='2' rx='1' ry='1' />
							<path d='M12 11h4' />
							<path d='M12 16h4' />
							<path d='M8 11h.01' />
							<path d='M8 16h.01' />
						</svg>
					</div>
					<h2>Le questionnaire pour ce chapitre est en cours de développement</h2>
					<p>Nous travaillons actuellement sur le questionnaire pour le Chapitre {chapterId}. Revenez bientôt!</p>
					<a href='/' class='btn back-button'>
						Retour à l'accueil
					</a>
				</div>
			) : (
				<ChapterContent title={chapterTitle} content={contentHtml} />
			)
		}

		<div class='navigation-buttons bottom-nav'>
			{
				parseInt(chapterId) > 8 && (
					<a href={`/chapitres/${(parseInt(chapterId) - 1).toString().padStart(2, "0")}`} class='nav-button prev'>
						<svg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'>
							<path d='m12 19-7-7 7-7' />
							<path d='M19 12H5' />
						</svg>
						<span>Chapitre précédent</span>
					</a>
				)
			}

			{
				parseInt(chapterId) < 13 && (
					<a href={`/chapitres/${(parseInt(chapterId) + 1).toString().padStart(2, "0")}`} class='nav-button next'>
						<span>Chapitre suivant</span>
						<svg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'>
							<path d='M5 12h14' />
							<path d='m12 5 7 7-7 7' />
						</svg>
					</a>
				)
			}
		</div>
	</div>
</MainLayout>

<style>
	.chapter-container {
		max-width: 1200px;
		margin: 0 auto;
	}

	.chapter-header {
		margin-top: 2rem;
		margin-bottom: 2rem;
	}

	.breadcrumbs {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		margin-bottom: 1.5rem;
		color: var(--text-light);
		font-size: 0.9rem;
	}

	.breadcrumbs a {
		display: flex;
		align-items: center;
		color: var(--text-light);
		transition: color var(--transition-normal);
	}

	.breadcrumbs a:hover {
		color: var(--primary-color);
	}

	.breadcrumbs span:last-child {
		color: var(--text-color);
		font-weight: 500;
	}

	.navigation-buttons {
		display: flex;
		justify-content: space-between;
		gap: 1rem;
		margin-bottom: 1rem;
	}

	.bottom-nav {
		margin-top: 3rem;
		margin-bottom: 1rem;
	}

	.nav-button {
		display: inline-flex;
		align-items: center;
		gap: 0.5rem;
		padding: 0.75rem 1.25rem;
		background: white;
		color: var(--text-color);
		text-decoration: none;
		border-radius: var(--border-radius);
		font-weight: 500;
		transition: all var(--transition-normal);
		border: 1px solid rgba(0, 0, 0, 0.08);
		box-shadow: var(--shadow-sm);
	}

	.nav-button:hover {
		background-color: var(--bg-color);
		color: var(--primary-color);
		box-shadow: var(--shadow);
		transform: translateY(-2px);
	}

	.nav-button svg {
		transition: transform var(--transition-normal);
	}

	.nav-button.prev:hover svg {
		transform: translateX(-3px);
	}

	.nav-button.next:hover svg {
		transform: translateX(3px);
	}

	.nav-button.prev {
		margin-right: auto;
	}

	.nav-button.next {
		margin-left: auto;
	}

	.exam-not-available {
		background: white;
		border-radius: var(--border-radius);
		box-shadow: var(--shadow);
		padding: 3rem 2rem;
		text-align: center;
		margin: 2rem 0;
		animation: fadeIn 0.6s ease;
	}

	.icon-container {
		width: 90px;
		height: 90px;
		border-radius: 50%;
		background: rgba(59, 130, 246, 0.1);
		display: flex;
		align-items: center;
		justify-content: center;
		margin: 0 auto 1.5rem;
		color: var(--primary-color);
	}

	.exam-not-available h2 {
		color: var(--text-color);
		margin-bottom: 1rem;
		font-size: 1.5rem;
	}

	.exam-not-available p {
		margin-bottom: 2rem;
		color: var(--text-light);
		max-width: 500px;
		margin-left: auto;
		margin-right: auto;
	}

	.back-button {
		margin-top: 1rem;
	}

	@keyframes fadeIn {
		from {
			opacity: 0;
			transform: translateY(10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	@media (max-width: 768px) {
		.navigation-buttons {
			flex-direction: column;
			gap: 0.75rem;
		}

		.nav-button {
			width: 100%;
			justify-content: center;
		}

		.nav-button.prev {
			margin-right: 0;
		}

		.nav-button.next {
			margin-left: 0;
		}

		.exam-not-available {
			padding: 2rem 1rem;
		}
	}
</style>
