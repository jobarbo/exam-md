---
export interface Props {
	title: string;
	examId: string;
	correctRadioAnswers?: Record<string, string>;
	correctCheckboxAnswers?: Record<string, string[]>;
}

const {title, examId, correctRadioAnswers, correctCheckboxAnswers} = Astro.props;
---

<div class='exam-content'>
	<h1>{title}</h1>
	<form id='examForm'>
		<slot />
		<button type='button' id='checkAnswers' class='btn-primary'>
			<span class='btn-text'>Vérifier les réponses</span>
			<span class='btn-icon'>✓</span>
		</button>
	</form>

	<div id='results'></div>
</div>

<script define:vars={{examId, correctRadioAnswers, correctCheckboxAnswers}}>
	// Cette fonction sera appelée avec les réponses correctes fournies par le fichier de données d'examen
	function setupExamValidation(correctRadioAnswers, correctCheckboxAnswers) {
		document.addEventListener("DOMContentLoaded", function () {
			const checkAnswersButton = document.getElementById("checkAnswers");
			if (checkAnswersButton) {
				checkAnswersButton.addEventListener("click", function () {
					// Ajouter un effet lors du clic
					checkAnswersButton.classList.add("clicked");
					setTimeout(() => {
						checkAnswersButton.classList.remove("clicked");
					}, 300);

					let score = 0;
					let totalQuestions = Object.keys(correctRadioAnswers).length + Object.keys(correctCheckboxAnswers).length;
					let resultsHtml = `<div class="results-header">
                        <h2>Résultats</h2>
                        <p class="results-summary"></p>
                    </div>
                    <div class="results-details">`;

					// Vérifier les questions à choix unique (radio)
					for (let q in correctRadioAnswers) {
						const selected = document.querySelector(`input[name="${q}"]:checked`);
						const questionDiv = document.getElementById(q);

						if (selected) {
							if (selected.value === correctRadioAnswers[q]) {
								score++;
								// Style pour réponse correcte
								if (questionDiv) {
									questionDiv.classList.add("correct-answer");
								}
								resultsHtml += `<div class="result-item correct">
									<div class="result-icon">✓</div>
									<div class="result-content">
										<p>Question ${q.substring(1)}: <span>Correct!</span></p>
									</div>
								</div>`;
							} else {
								// Style pour réponse incorrecte
								if (questionDiv) {
									questionDiv.classList.add("incorrect-answer");
								}
								resultsHtml += `<div class="result-item incorrect">
									<div class="result-icon">✕</div>
									<div class="result-content">
										<p>Question ${q.substring(1)}: <span>Incorrect</span></p>
									</div>
								</div>`;
							}
						} else {
							// Style pour question non répondue
							if (questionDiv) {
								questionDiv.classList.add("unanswered");
							}
							resultsHtml += `<div class="result-item unanswered">
								<div class="result-icon">!</div>
								<div class="result-content">
									<p>Question ${q.substring(1)}: <span>Non répondu</span></p>
								</div>
							</div>`;
						}

						// Afficher l'explication
						const explanation = document.getElementById(`explain${q.substring(1)}`);
						if (explanation) {
							explanation.classList.add("visible");
						}
					}

					// Vérifier les questions à choix multiples (checkbox)
					for (let q in correctCheckboxAnswers) {
						const questionDiv = document.getElementById(q);
						const selectedCheckboxes = document.querySelectorAll(`input[name="${q}"]:checked`);
						const selectedValues = Array.from(selectedCheckboxes).map((cb) => cb.value);

						// Vérifier si les réponses sélectionnées correspondent exactement aux réponses correctes
						const correctForThisQuestion = correctCheckboxAnswers[q];
						const isCorrect = selectedValues.length === correctForThisQuestion.length && selectedValues.every((val) => correctForThisQuestion.includes(val));

						if (selectedValues.length > 0) {
							if (isCorrect) {
								score++;
								// Style pour réponse correcte
								if (questionDiv) {
									questionDiv.classList.add("correct-answer");
								}
								resultsHtml += `<div class="result-item correct">
									<div class="result-icon">✓</div>
									<div class="result-content">
										<p>Question ${q.substring(1)}: <span>Correct!</span></p>
									</div>
								</div>`;
							} else {
								// Style pour réponse incorrecte
								if (questionDiv) {
									questionDiv.classList.add("incorrect-answer");
								}
								resultsHtml += `<div class="result-item incorrect">
									<div class="result-icon">✕</div>
									<div class="result-content">
										<p>Question ${q.substring(1)}: <span>Incorrect</span></p>
									</div>
								</div>`;
							}
						} else {
							// Style pour question non répondue
							if (questionDiv) {
								questionDiv.classList.add("unanswered");
							}
							resultsHtml += `<div class="result-item unanswered">
								<div class="result-icon">!</div>
								<div class="result-content">
									<p>Question ${q.substring(1)}: <span>Non répondu</span></p>
								</div>
							</div>`;
						}

						// Afficher l'explication
						const explanation = document.getElementById(`explain${q.substring(1)}`);
						if (explanation) {
							explanation.classList.add("visible");
						}
					}

					resultsHtml += `</div>`;

					const resultsDiv = document.getElementById("results");
					if (resultsDiv) {
						resultsDiv.innerHTML = resultsHtml;
						resultsDiv.style.display = "block";

						// Update score summary
						const percentage = Math.round((score / totalQuestions) * 100);
						const resultsSummary = resultsDiv.querySelector(".results-summary");
						if (resultsSummary) {
							resultsSummary.innerHTML = `<span class="score-number">${score}/${totalQuestions}</span> <span class="score-percentage">(${percentage}%)</span>`;

							// Add score class based on result
							if (percentage >= 80) {
								resultsSummary.classList.add("high-score");
							} else if (percentage >= 60) {
								resultsSummary.classList.add("medium-score");
							} else {
								resultsSummary.classList.add("low-score");
							}
						}

						// Add animation class for entrance
						resultsDiv.classList.add("results-visible");

						// Défiler jusqu'aux résultats avec une animation fluide
						setTimeout(() => {
							resultsDiv.scrollIntoView({behavior: "smooth"});
						}, 200);
					}
				});
			}
		});
	}

	// Use the answers passed from the component props
	if (correctRadioAnswers && correctCheckboxAnswers) {
		setupExamValidation(correctRadioAnswers, correctCheckboxAnswers);
	} else {
		// Fallback to dynamic import if answers aren't passed as props
		import(`/src/data/exams/exam${examId}.js`)
			.then((module) => {
				setupExamValidation(module.correctRadioAnswers, module.correctCheckboxAnswers);
			})
			.catch((error) => {
				console.error(`Erreur lors du chargement des réponses pour l'examen ${examId}:`, error);
			});
	}
</script>

<style>
	/* Main container styling */
	.exam-content {
		background: white;
		border-radius: var(--border-radius);
		box-shadow: var(--shadow);
		padding: 2.5rem;
		max-width: 800px;
		margin: 0 auto 3rem;
		position: relative;
		animation: fadeIn 0.6s ease;
	}

	.exam-content::before {
		content: "";
		position: absolute;
		top: 0;
		left: 0;
		width: 4px;
		height: 100%;
		background: linear-gradient(to bottom, var(--primary-color), var(--secondary-color));
		border-radius: var(--border-radius) 0 0 var(--border-radius);
	}

	h1 {
		margin-top: 0;
		margin-bottom: 2rem;
		color: var(--text-color);
		border-bottom: 1px solid rgba(0, 0, 0, 0.08);
		padding-bottom: 1rem;
		font-size: 1.8rem;
		position: relative;
	}

	h1::after {
		content: "";
		position: absolute;
		bottom: -1px;
		left: 0;
		width: 80px;
		height: 3px;
		background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
		border-radius: 3px;
	}

	/* Button styling */
	.btn-primary {
		background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
		color: white;
		border: none;
		padding: 0.85rem 1.8rem;
		border-radius: var(--border-radius);
		cursor: pointer;
		font-size: 1.05rem;
		font-weight: 500;
		margin-top: 2rem;
		transition: all var(--transition-normal);
		position: relative;
		overflow: hidden;
		box-shadow: var(--shadow-sm);
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 0.75rem;
		letter-spacing: 0.02em;
	}

	.btn-primary:hover {
		box-shadow: var(--shadow-md);
		transform: translateY(-2px);
	}

	.btn-primary .btn-icon {
		font-size: 1.1rem;
		display: inline-flex;
		align-items: center;
		justify-content: center;
		width: 22px;
		height: 22px;
		border-radius: 50%;
		background-color: rgba(255, 255, 255, 0.2);
	}

	.clicked {
		transform: scale(0.95) !important;
		box-shadow: var(--shadow-sm) !important;
	}

	/* Results section styling - using :global for dynamic content */
	:global(#results) {
		margin-top: 2.5rem;
		border-radius: var(--border-radius);
		background-color: white;
		overflow: hidden;
		display: none;
		box-shadow: var(--shadow);
		border: 1px solid rgba(0, 0, 0, 0.05);
		opacity: 0;
		transform: translateY(10px);
		transition:
			opacity 0.5s cubic-bezier(0.19, 1, 0.22, 1),
			transform 0.5s cubic-bezier(0.19, 1, 0.22, 1);
	}

	:global(.results-visible) {
		opacity: 1 !important;
		transform: translateY(0) !important;
	}

	:global(.results-header) {
		padding: 1.5rem;
		border-bottom: 1px solid rgba(0, 0, 0, 0.08);
		display: flex;
		align-items: center;
		justify-content: space-between;
		background: linear-gradient(to right, rgba(var(--primary-color-rgb), 0.05), rgba(var(--secondary-color-rgb), 0.05));
	}

	:global(.results-header h2) {
		margin: 0;
		font-size: 1.5rem;
		color: var(--text-color);
		position: relative;
		padding-left: 15px;
	}

	:global(.results-header h2::before) {
		content: "";
		position: absolute;
		left: 0;
		top: 50%;
		transform: translateY(-50%);
		width: 5px;
		height: 70%;
		background: linear-gradient(to bottom, var(--primary-color), var(--secondary-color));
		border-radius: var(--border-radius-sm);
	}

	:global(.results-summary) {
		font-size: 1.2rem;
		font-weight: 600;
		margin: 0;
		padding: 0.5rem 1rem;
		border-radius: var(--border-radius-sm);
		background-color: rgba(0, 0, 0, 0.03);
	}

	:global(.score-number) {
		font-size: 1.4rem;
	}

	:global(.high-score) {
		color: var(--success-color);
	}

	:global(.medium-score) {
		color: var(--warning-color);
	}

	:global(.low-score) {
		color: var(--error-color);
	}

	:global(.results-details) {
		padding: 1.25rem;
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
		gap: 1rem;
	}

	/* Result item styling */
	:global(.result-item) {
		display: flex;
		align-items: center;
		padding: 0.85rem;
		border-radius: var(--border-radius-sm);
		transition: all 0.3s cubic-bezier(0.19, 1, 0.22, 1);
		box-shadow: var(--shadow-sm);
		border-left: 3px solid transparent;
		background-color: rgba(255, 255, 255, 0.7);
		backdrop-filter: blur(10px);
		position: relative;
		overflow: hidden;
	}

	:global(.result-item::after) {
		content: "";
		position: absolute;
		bottom: 0;
		left: 10%;
		width: 80%;
		height: 1px;
		background: linear-gradient(to right, transparent, rgba(0, 0, 0, 0.05), transparent);
	}

	:global(.result-item:hover) {
		transform: translateX(3px) translateY(-2px);
		box-shadow: var(--shadow-md);
	}

	:global(.result-item.correct) {
		background-color: rgba(16, 185, 129, 0.05);
		border-left-color: var(--success-color);
	}

	:global(.result-item.incorrect) {
		background-color: rgba(239, 68, 68, 0.05);
		border-left-color: var(--error-color);
	}

	:global(.result-item.unanswered) {
		background-color: rgba(245, 158, 11, 0.05);
		border-left-color: var(--warning-color);
	}

	:global(.result-icon) {
		width: 32px;
		height: 32px;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		margin-right: 0.75rem;
		font-weight: bold;
		font-size: 0.9rem;
		flex-shrink: 0;
	}

	:global(.correct .result-icon) {
		background-color: var(--success-color);
		color: white;
		box-shadow: 0 2px 8px rgba(16, 185, 129, 0.3);
	}

	:global(.incorrect .result-icon) {
		background-color: var(--error-color);
		color: white;
		box-shadow: 0 2px 8px rgba(239, 68, 68, 0.3);
	}

	:global(.unanswered .result-icon) {
		background-color: var(--warning-color);
		color: white;
		box-shadow: 0 2px 8px rgba(245, 158, 11, 0.3);
	}

	:global(.result-content) {
		flex: 1;
	}

	:global(.result-content p) {
		margin: 0;
		line-height: 1.4;
	}

	:global(.result-content span) {
		font-weight: 600;
		display: block;
		margin-top: 0.2rem;
	}

	/* Global animations for validation states */
	:global(.correct-answer) {
		border-left: 4px solid var(--success-color) !important;
		box-shadow: 0 0 15px rgba(16, 185, 129, 0.1) !important;
		animation: pulse-success 1s ease;
	}

	:global(.incorrect-answer) {
		border-left: 4px solid var(--error-color) !important;
		box-shadow: 0 0 15px rgba(239, 68, 68, 0.1) !important;
		animation: pulse-error 1s ease;
	}

	:global(.unanswered) {
		border-left: 4px solid var(--warning-color) !important;
		box-shadow: 0 0 15px rgba(245, 158, 11, 0.1) !important;
		animation: pulse-warning 1s ease;
	}

	:global(.explanation.visible) {
		display: block;
		animation: slideDown 0.4s ease-out;
	}

	/* Animations */
	@keyframes fadeIn {
		from {
			opacity: 0;
			transform: translateY(10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	@keyframes slideDown {
		from {
			opacity: 0;
			transform: translateY(-10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	@keyframes pulse-success {
		0%,
		100% {
			box-shadow: 0 0 15px rgba(16, 185, 129, 0.1);
		}
		50% {
			box-shadow: 0 0 20px rgba(16, 185, 129, 0.3);
		}
	}

	@keyframes pulse-error {
		0%,
		100% {
			box-shadow: 0 0 15px rgba(239, 68, 68, 0.1);
		}
		50% {
			box-shadow: 0 0 20px rgba(239, 68, 68, 0.3);
		}
	}

	@keyframes pulse-warning {
		0%,
		100% {
			box-shadow: 0 0 15px rgba(245, 158, 11, 0.1);
		}
		50% {
			box-shadow: 0 0 20px rgba(245, 158, 11, 0.3);
		}
	}

	/* Responsive styles */
	@media (max-width: 768px) {
		.exam-content {
			padding: 1.5rem;
			margin-bottom: 2rem;
		}

		:global(.results-header) {
			flex-direction: column;
			align-items: flex-start;
		}

		:global(.results-summary) {
			margin-top: 0.75rem;
			width: 100%;
		}

		:global(.results-details) {
			grid-template-columns: 1fr;
			padding: 1rem;
		}
	}
</style>
